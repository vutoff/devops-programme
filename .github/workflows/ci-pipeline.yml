---
name: GitHub Actions Homework Demo
run-name: ${{ github.actor }} is testing out GitHub Actions
on:
  push:
    branches:
      - github-actions-practice

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install pre-commit
        run: |
          python -m pip install pre-commit
          pre-commit install
      - name: Run pre-commit
        run: pre-commit run --all-files

  editorconfig-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check .editorconfig exists
        run: |
          if [ ! -f .editorconfig ]; then
            echo ".editorconfig file not found in root directory"
            exit 1
          fi
      - name: Install editorconfig-checker
        run: |
          npm install -g editorconfig-checker
          editorconfig-checker

  secrets-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check for hardcoded secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  markdown-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run markdown lint with npx
        run: npx markdownlint-cli .

  code-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install linting tools
        run: pip install pylint flake8 flask
      - name: Lint Python code
        run: |
          find . -name '*.py' | xargs pylint
          flake8 .

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Run unit tests
        run: |
          cd app
          python -m unittest discover -v

  docker-build:
    needs:
      - pre-commit
      - editorconfig-check
      - secrets-check
      - markdown-check
      - code-lint
      - unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/u34:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/u34:latest

  trivy:
    needs: docker-build
    runs-on: ubuntu-latest
    outputs:
      has_critical_vulnerabilities: ${{ steps.trivy.outputs.exit_code }}
    steps:
      - uses: actions/checkout@v2
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/u34:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL'

  snyk:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test

  docker-compose:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Compose
        run: |
          BASEURL="https://github.com/docker/compose/releases/latest/download"
          FILENAME="docker-compose-$(uname -s)-$(uname -m)"
          sudo curl -L "${BASEURL}/${FILENAME}" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      - name: Build and Run Container with Docker Compose
        run: |
          docker-compose up -d --build
          docker-compose ps
          docker-compose logs

  push-to-docker:
    needs:
      - trivy
      - snyk
    runs-on: ubuntu-latest
    if: ${{ needs.trivy.outputs.has_critical_vulnerabilities == '0' }}
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/u34:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/u34:latest

  sonarcloud:
    needs: [push-to-docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
