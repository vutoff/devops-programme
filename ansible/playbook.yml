- name: Build, push and run Docker container
  hosts: localhost
  vars:
    image_name: "ghristov/practice1"
    image_tag: "e934bdd"
    listen_port: 5000
    full_image_name: "{{ image_name }}:{{ image_tag }}"
    dockerfile_path: "../"

  tasks:
    - name: Is Docker Python SDK installed
      pip:
        name: docker
        state: present
      become: true

    - name: Is Dockerfile exists in parent dir
      stat:
        path: "{{ dockerfile_path }}/Dockerfile"
      register: dockerfile_check

    - name: Fail if Dockerfile is missing
      fail:
        msg: "Dockerfile not found"
      when: not dockerfile_check.stat.exists

    - name: Build Docker image
      community.docker.docker_image:
        name: "{{ image_name }}"
        tag: "{{ image_tag }}"
        source: build
        build:
          path: "{{ dockerfile_path }}"
          pull: yes
        force_source: yes
        state: present
      register: build_result

    - name: Log into Docker registry
      community.docker.docker_login:
        username: "{{ docker_username }}"
        password: "{{ docker_password }}"
      when: docker_username is defined and docker_password is defined
      register: login_result

    - name: Push Docker image to registry
      community.docker.docker_image:
        name: "{{ full_image_name }}"
        push: yes
        source: local
      when:
        - docker_username is defined
        - docker_password is defined
        - build_result is succeeded
      register: push_result

    - name: If existing container then remove
      community.docker.docker_container:
        name: ansible-test
        state: absent
        force_kill: yes
      ignore_errors: yes

    - name: Run Docker container
      community.docker.docker_container:
        name: ansible-test
        image: "{{ full_image_name }}"
        state: started
        recreate: yes
        pull: false
        ports:
          - "{{ listen_port }}:{{ listen_port }}"
        env:
          PORT: "{{ listen_port | string }}"
        restart_policy: unless-stopped
      when: build_result is succeeded
